import logging

from communicator_objects import UnityRLOutput, UnityRLInput,\
    UnityOutput, UnityInput, AcademyParameters,\
    UnityInitializationInput, UnityInitializationOutput

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("unityagents")


class Communicator(object):
    def __init__(self, worker_id=0,
                 base_port=5005):
        """
        Python side of the communication. Must be used in pair with the right Unity Communicator equivalent.

        :int base_port: Baseline port number to connect to Unity environment over. worker_id increments over this.
        :int worker_id: Number to add to communication port (5005) [0]. Used for asynchronous agent scenarios.
        """

    def get_academy_parameters(self, python_parameters) -> AcademyParameters:
        """
        Used to exchange initialization parameters between Python and the Environment
        :param python_parameters: The python parameters that will be sent to the environment.
        :return: AcademyParameters: The parameters received from the environment
        """

    def send(self, inputs: UnityRLInput) -> UnityRLOutput:
        """
        Used to send an input and receive an output from the Environment
        :param inputs: The UnityRLInput that needs to be sent the Environment
        :return: The UnityRLOutputs generated by the Environment
        """

    def close(self):
        """
        Sends a shutdown signal to the unity environment, and closes the connection.
        """

