// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: communicator/brain_parameters.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MLAgents.Communicator {

  /// <summary>Holder for reflection information generated from communicator/brain_parameters.proto</summary>
  public static partial class BrainParametersReflection {

    #region Descriptor
    /// <summary>File descriptor for communicator/brain_parameters.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BrainParametersReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNjb21tdW5pY2F0b3IvYnJhaW5fcGFyYW1ldGVycy5wcm90bxIMY29tbXVu",
            "aWNhdG9yGh1jb21tdW5pY2F0b3IvcmVzb2x1dGlvbi5wcm90bxodY29tbXVu",
            "aWNhdG9yL2JyYWluX3R5cGUucHJvdG8aHWNvbW11bmljYXRvci9zcGFjZV90",
            "eXBlLnByb3RvIo0DCg9CcmFpblBhcmFtZXRlcnMSHwoXdmVjdG9yX29ic2Vy",
            "dmF0aW9uX3NpemUYASABKAUSJwofbnVtX3N0YWNrZWRfdmVjdG9yX29ic2Vy",
            "dmF0aW9ucxgCIAEoBRIaChJ2ZWN0b3JfYWN0aW9uX3NpemUYAyABKAUSNAoS",
            "Y2FtZXJhX3Jlc29sdXRpb25zGAQgAygLMhguY29tbXVuaWNhdG9yLlJlc29s",
            "dXRpb24SIgoadmVjdG9yX2FjdGlvbl9kZXNjcmlwdGlvbnMYBSADKAkSOQoY",
            "dmVjdG9yX2FjdGlvbl9zcGFjZV90eXBlGAYgASgOMhcuY29tbXVuaWNhdG9y",
            "LlNwYWNlVHlwZRI+Ch12ZWN0b3Jfb2JzZXJ2YXRpb25fc3BhY2VfdHlwZRgH",
            "IAEoDjIXLmNvbW11bmljYXRvci5TcGFjZVR5cGUSEgoKYnJhaW5fbmFtZRgI",
            "IAEoCRIrCgpicmFpbl90eXBlGAkgASgOMhcuY29tbXVuaWNhdG9yLkJyYWlu",
            "VHlwZUIYqgIVTUxBZ2VudHMuQ29tbXVuaWNhdG9yYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MLAgents.Communicator.ResolutionReflection.Descriptor, global::MLAgents.Communicator.BrainTypeReflection.Descriptor, global::MLAgents.Communicator.SpaceTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MLAgents.Communicator.BrainParameters), global::MLAgents.Communicator.BrainParameters.Parser, new[]{ "VectorObservationSize", "NumStackedVectorObservations", "VectorActionSize", "CameraResolutions", "VectorActionDescriptions", "VectorActionSpaceType", "VectorObservationSpaceType", "BrainName", "BrainType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BrainParameters : pb::IMessage<BrainParameters> {
    private static readonly pb::MessageParser<BrainParameters> _parser = new pb::MessageParser<BrainParameters>(() => new BrainParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BrainParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MLAgents.Communicator.BrainParametersReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrainParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrainParameters(BrainParameters other) : this() {
      vectorObservationSize_ = other.vectorObservationSize_;
      numStackedVectorObservations_ = other.numStackedVectorObservations_;
      vectorActionSize_ = other.vectorActionSize_;
      cameraResolutions_ = other.cameraResolutions_.Clone();
      vectorActionDescriptions_ = other.vectorActionDescriptions_.Clone();
      vectorActionSpaceType_ = other.vectorActionSpaceType_;
      vectorObservationSpaceType_ = other.vectorObservationSpaceType_;
      brainName_ = other.brainName_;
      brainType_ = other.brainType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrainParameters Clone() {
      return new BrainParameters(this);
    }

    /// <summary>Field number for the "vector_observation_size" field.</summary>
    public const int VectorObservationSizeFieldNumber = 1;
    private int vectorObservationSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VectorObservationSize {
      get { return vectorObservationSize_; }
      set {
        vectorObservationSize_ = value;
      }
    }

    /// <summary>Field number for the "num_stacked_vector_observations" field.</summary>
    public const int NumStackedVectorObservationsFieldNumber = 2;
    private int numStackedVectorObservations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumStackedVectorObservations {
      get { return numStackedVectorObservations_; }
      set {
        numStackedVectorObservations_ = value;
      }
    }

    /// <summary>Field number for the "vector_action_size" field.</summary>
    public const int VectorActionSizeFieldNumber = 3;
    private int vectorActionSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VectorActionSize {
      get { return vectorActionSize_; }
      set {
        vectorActionSize_ = value;
      }
    }

    /// <summary>Field number for the "camera_resolutions" field.</summary>
    public const int CameraResolutionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::MLAgents.Communicator.Resolution> _repeated_cameraResolutions_codec
        = pb::FieldCodec.ForMessage(34, global::MLAgents.Communicator.Resolution.Parser);
    private readonly pbc::RepeatedField<global::MLAgents.Communicator.Resolution> cameraResolutions_ = new pbc::RepeatedField<global::MLAgents.Communicator.Resolution>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MLAgents.Communicator.Resolution> CameraResolutions {
      get { return cameraResolutions_; }
    }

    /// <summary>Field number for the "vector_action_descriptions" field.</summary>
    public const int VectorActionDescriptionsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_vectorActionDescriptions_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> vectorActionDescriptions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> VectorActionDescriptions {
      get { return vectorActionDescriptions_; }
    }

    /// <summary>Field number for the "vector_action_space_type" field.</summary>
    public const int VectorActionSpaceTypeFieldNumber = 6;
    private global::MLAgents.Communicator.SpaceType vectorActionSpaceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MLAgents.Communicator.SpaceType VectorActionSpaceType {
      get { return vectorActionSpaceType_; }
      set {
        vectorActionSpaceType_ = value;
      }
    }

    /// <summary>Field number for the "vector_observation_space_type" field.</summary>
    public const int VectorObservationSpaceTypeFieldNumber = 7;
    private global::MLAgents.Communicator.SpaceType vectorObservationSpaceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MLAgents.Communicator.SpaceType VectorObservationSpaceType {
      get { return vectorObservationSpaceType_; }
      set {
        vectorObservationSpaceType_ = value;
      }
    }

    /// <summary>Field number for the "brain_name" field.</summary>
    public const int BrainNameFieldNumber = 8;
    private string brainName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrainName {
      get { return brainName_; }
      set {
        brainName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "brain_type" field.</summary>
    public const int BrainTypeFieldNumber = 9;
    private global::MLAgents.Communicator.BrainType brainType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MLAgents.Communicator.BrainType BrainType {
      get { return brainType_; }
      set {
        brainType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BrainParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BrainParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VectorObservationSize != other.VectorObservationSize) return false;
      if (NumStackedVectorObservations != other.NumStackedVectorObservations) return false;
      if (VectorActionSize != other.VectorActionSize) return false;
      if(!cameraResolutions_.Equals(other.cameraResolutions_)) return false;
      if(!vectorActionDescriptions_.Equals(other.vectorActionDescriptions_)) return false;
      if (VectorActionSpaceType != other.VectorActionSpaceType) return false;
      if (VectorObservationSpaceType != other.VectorObservationSpaceType) return false;
      if (BrainName != other.BrainName) return false;
      if (BrainType != other.BrainType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VectorObservationSize != 0) hash ^= VectorObservationSize.GetHashCode();
      if (NumStackedVectorObservations != 0) hash ^= NumStackedVectorObservations.GetHashCode();
      if (VectorActionSize != 0) hash ^= VectorActionSize.GetHashCode();
      hash ^= cameraResolutions_.GetHashCode();
      hash ^= vectorActionDescriptions_.GetHashCode();
      if (VectorActionSpaceType != 0) hash ^= VectorActionSpaceType.GetHashCode();
      if (VectorObservationSpaceType != 0) hash ^= VectorObservationSpaceType.GetHashCode();
      if (BrainName.Length != 0) hash ^= BrainName.GetHashCode();
      if (BrainType != 0) hash ^= BrainType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VectorObservationSize != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VectorObservationSize);
      }
      if (NumStackedVectorObservations != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumStackedVectorObservations);
      }
      if (VectorActionSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VectorActionSize);
      }
      cameraResolutions_.WriteTo(output, _repeated_cameraResolutions_codec);
      vectorActionDescriptions_.WriteTo(output, _repeated_vectorActionDescriptions_codec);
      if (VectorActionSpaceType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) VectorActionSpaceType);
      }
      if (VectorObservationSpaceType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) VectorObservationSpaceType);
      }
      if (BrainName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BrainName);
      }
      if (BrainType != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) BrainType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VectorObservationSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VectorObservationSize);
      }
      if (NumStackedVectorObservations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumStackedVectorObservations);
      }
      if (VectorActionSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VectorActionSize);
      }
      size += cameraResolutions_.CalculateSize(_repeated_cameraResolutions_codec);
      size += vectorActionDescriptions_.CalculateSize(_repeated_vectorActionDescriptions_codec);
      if (VectorActionSpaceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VectorActionSpaceType);
      }
      if (VectorObservationSpaceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VectorObservationSpaceType);
      }
      if (BrainName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrainName);
      }
      if (BrainType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BrainType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BrainParameters other) {
      if (other == null) {
        return;
      }
      if (other.VectorObservationSize != 0) {
        VectorObservationSize = other.VectorObservationSize;
      }
      if (other.NumStackedVectorObservations != 0) {
        NumStackedVectorObservations = other.NumStackedVectorObservations;
      }
      if (other.VectorActionSize != 0) {
        VectorActionSize = other.VectorActionSize;
      }
      cameraResolutions_.Add(other.cameraResolutions_);
      vectorActionDescriptions_.Add(other.vectorActionDescriptions_);
      if (other.VectorActionSpaceType != 0) {
        VectorActionSpaceType = other.VectorActionSpaceType;
      }
      if (other.VectorObservationSpaceType != 0) {
        VectorObservationSpaceType = other.VectorObservationSpaceType;
      }
      if (other.BrainName.Length != 0) {
        BrainName = other.BrainName;
      }
      if (other.BrainType != 0) {
        BrainType = other.BrainType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VectorObservationSize = input.ReadInt32();
            break;
          }
          case 16: {
            NumStackedVectorObservations = input.ReadInt32();
            break;
          }
          case 24: {
            VectorActionSize = input.ReadInt32();
            break;
          }
          case 34: {
            cameraResolutions_.AddEntriesFrom(input, _repeated_cameraResolutions_codec);
            break;
          }
          case 42: {
            vectorActionDescriptions_.AddEntriesFrom(input, _repeated_vectorActionDescriptions_codec);
            break;
          }
          case 48: {
            vectorActionSpaceType_ = (global::MLAgents.Communicator.SpaceType) input.ReadEnum();
            break;
          }
          case 56: {
            vectorObservationSpaceType_ = (global::MLAgents.Communicator.SpaceType) input.ReadEnum();
            break;
          }
          case 66: {
            BrainName = input.ReadString();
            break;
          }
          case 72: {
            brainType_ = (global::MLAgents.Communicator.BrainType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
